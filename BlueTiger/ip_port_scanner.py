import os
import socket
import threading
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

blue = Fore.BLUE
white = Fore.WHITE
red = Fore.RED
green = Fore.GREEN

def banner():
    return f"""{blue}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⠴⠶⠲⠛⠋⠛⠉⠉⠉⠛⠙⢿⠗⠲⠶⢤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⠾⠋⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠋⠛⠶⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⡾⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⠾⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⠶⠾⠿⠟⠛⠛⠛⠻⠿⠷⠶⣶⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⢶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠦⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣴⠋⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀
⠀⠀⠀⢀⣼⠋⠀⠀⠀⠀⠀⠀⠀⣰⡿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⠾⠟⠛⠋⠉⠉⢉⣩⡿⠉⠛⠻⠷⣦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠳⡄⠀⠀⠀
⠀⠀⠀⡼⠋⠀⠀⠀⠀⠀⠀⣤⣿⡏⠀⠀⠀⠀⠀⠀⠀⣠⣶⠟⠋⠁⠀⠀⠀⢀⣠⣾⣿⡟⠀⠀⠀⠀⠀⠀⠉⠻⣷⣤⡀⠀⠀⠀⠀⠀⠀⠙⢿⣤⠀⠀⠀⠀⠀⠀⠀⢱⡄⠀⠀
⠀⠀⣼⠅⠀⠀⠀⠀⠀⠀⢠⣿⢱⣧⡀⢠⣴⣤⣤⣤⡾⠋⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠉⠻⣦⣤⣴⣶⣶⣦⣤⣈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠹⡀⠀
⠀⢠⠋⠀⠀⠀⠀⠀⠀⢠⡿⠁⠘⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⣀⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⡛⠛⠓⣿⣇⠀⠀⠀⠀⠀⠀⠀⢷⠀
⠀⡏⠀⠀⠀⠀⠀⠀⠀⣿⠇⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⢀⣴⡾⠛⢻⣿⣿⣿⣿⣿⡿⠛⠻⣦⣄⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⢻⣿⡄⠀⠀⠀⠀⠀⠀⢈⠇
⠀⠃⠀⠀⠀⠀⠀⠀⣸⡏⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⠏⠀⠀⢐⣴⡟⠁⠀⠀⠀⠈⠙⠛⠛⠉⠀⠀⠀⠈⠻⣷⡀⠀⠀⠸⢿⣿⣿⣿⣿⠋⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⠀⠃
⣀⠀⠀⠀⠀⠀⠀⢨⣿⡅⠀⠀⠀⠀⠀⣸⣿⠁⠀⠀⠀⠀⢀⣾⠏⠀⠀⠀⠀⣠⣴⣶⣶⣶⣦⣄⠀⠀⠀⠀⠘⣷⡄⠀⠀⠀⠀⠀⠸⣿⠀⠀⠀⠀⠀⠀⢿⡦⠀⠀⠀⠀⠀⠀⢠
⡟⠀⠀⠀⠀⠀⠀⢘⣿⠁⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⠀⣶⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⣸⡇⠀⠀⠀⠀⠀⠀⢸
⡗⠀⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⣿⠁⠀⠀⠀⠀⠀⣿⣏⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⠀⠀⠀⢸
⣗⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⢀⣼⣷⣶⣤⡀⠂⢿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⣤⣶⣶⣿⣄⠀⠀⠀⠀⠀⣾⠇⠀⠀⠀⠀⠀⣺⡇⠀⠀⠀⠀⠀⠀⢰
⠛⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⠀⠀⢿⡇⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⡇⠀⠻⢿⣿⣿⣿⣿⠿⠃⢠⣾⣿⣿⣿⣿⣿⣷⡀⠀⠀⢀⣿⠀⠀⠀⠀⠀⠀⣿⣷⠀⠀⠀⠀⠀⠀⢸
⠀⡀⠀⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⠀⠀⠘⣿⣠⣀⣀⢸⣿⣿⣿⣿⣿⣿⡟⠃⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣼⡏⠀⠀⠀⠀⠀⢸⣿⠃⠀⠀⠀⠀⠀⠀⠀
⠀⡆⠀⠀⠀⠀⠀⠀⠈⣿⡀⠀⠀⠀⠀⠀⣹⣧⡙⠻⢿⣿⣿⣿⣿⡿⢿⣕⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⢿⣿⣿⣿⠟⢻⣿⢀⣼⡟⠀⠀⠀⠀⠀⢀⣼⡏⠀⠀⠀⠀⠀⠀⢀⠀
⠀⢰⡄⠀⠀⠀⠀⠀⠀⢹⣿⠀⠀⠀⠀⠀⠁⠹⣷⡀⠀⠀⠉⠉⠀⠀⠀⠉⠛⠷⠶⣤⣤⣤⡶⠿⠛⠋⠁⠀⠀⠀⠀⠀⠈⣿⣼⠟⠀⠀⠀⠀⠀⠀⣶⡿⠀⠀⠀⠀⠀⠀⠀⡾⠀
⠀⠀⢧⠀⠀⠀⠀⠀⠀⠀⢹⣷⡀⠀⠀⠀⠀⠀⠈⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡾⠋⠀⠀⠀⠀⠀⠀⣼⡟⠁⠀⠀⠀⠀⠀⠀⢠⠃⠀
⠀⠀⠘⣇⡀⠀⠀⠀⠀⠀⠀⠻⣷⡀⠀⠀⠀⠀⠀⠀⠙⠿⣶⣀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⡀⠀⠀⠀⠀⠀⠀⣀⣤⡾⠋⠀⠀⠀⠀⠀⠀⣀⣼⠟⠁⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀
⠀⠀⠀⠸⣆⠀⠀⠀⠀⠀⠀⠀⠉⢿⣆⠀⠀⠀⠀⠀⠀⠀⠈⢹⡿⣦⣤⣀⡀⣰⣿⣿⣿⣿⣿⣧⢀⣠⣤⣴⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⣰⣿⠋⠀⠀⠀⠀⠀⠀⠀⢠⠎⠀⠀⠀
⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⣿⣿⣿⣿⣿⣿⣿⠿⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠈⠹⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⢀⡼⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⠟⠃⠀⠀⠀⠀⠀⠀⣤⣶⡾⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⢶⣦⣤⣄⣀⣀⣿⣋⣁⣀⣀⣠⣤⣴⡶⠿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠙⠛⠋⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠒⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠦⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡤⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠚⠢⠥⢄⣀⣀⣀⣀⡀⡀⡀⢀⢀⣀⣄⣀⣀⣠⠤⠴⠖⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
{Style.RESET_ALL}
"""

def scan_port(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(1)
        result = s.connect_ex((ip, port))
        status = "open" if result == 0 else "closed"
        if status == "open":
            print(f"{green}Port {port}: {status}{Style.RESET_ALL}")
        else:
            print(f"{red}Port {port}: {status}{Style.RESET_ALL}")

def scan_ports(ip, ports):
    print(f"{blue}Scanning ports on {ip}...{Style.RESET_ALL}")
    threads = []
    for port in ports:
        thread = threading.Thread(target=scan_port, args=(ip, port))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

def main():
    print(banner())
    ip = input(f"{white}Enter IP address to scan: ")

    # Common ports to scan
    ports = list(range(1, 1025))  # Scan ports from 1 to 1024

    scan_ports(ip, ports)

if __name__ == "__main__":
    main()
