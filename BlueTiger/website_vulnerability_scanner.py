import requests
import socket
import urllib.parse
from bs4 import BeautifulSoup
import argparse
import sys
from datetime import datetime

class VulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.vulnerabilities_found = []
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) VulnerabilityScanner/1.0'
        })

    def display_banner(self):
        """Display tool banner"""
        banner = r"""
        __      _______ _   _ _____ _____ _____ _   _ ___________   _ 
        \ \    / /_   _| \ | |_   _|  ___|  _  | \ | |  ___| ___ \ | |
         \ \  / /  | | |  \| | | | | |__ | | | |  \| | |__ | |_/ / | |
          \ \/ /   | | | . ` | | | |  __|| | | | . ` |  __||    /  | |
           \  /   _| |_| |\  | | | | |___\ \_/ / |\  | |___| |\ \  |_|
            \/   |_____|_| \_| \_/ \____/ \___/\_| \_\____/\_| \_| (_)
        
                     Website Vulnerability Assessment Tool
                              baka
        """
        print(banner)
        print("="*80)
        print(f"Scan started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Target URL: {self.target_url}")
        print("="*80)
        print()

    def check_sql_injection(self):
        """Check for basic SQL injection vulnerabilities"""
        test_urls = [
            f"{self.target_url}?id=1'",
            f"{self.target_url}?id=1\"",
            f"{self.target_url}?id=1 AND 1=1",
            f"{self.target_url}?id=1 AND 1=2"
        ]
        
        for url in test_urls:
            try:
                response = self.session.get(url, timeout=10)
                content = response.text.lower()
                
                if "sql" in content or "syntax" in content or "database" in content:
                    self.vulnerabilities_found.append({
                        'type': 'SQL Injection',
                        'url': url,
                        'severity': 'High',
                        'description': 'Potential SQL injection vulnerability detected'
                    })
                    break
            except:
                continue

    def check_xss(self):
        """Check for basic XSS vulnerabilities"""
        test_string = "<script>alert('XSS')</script>"
        test_url = f"{self.target_url}?q={urllib.parse.quote(test_string)}"
        
        try:
            response = self.session.get(test_url, timeout=10)
            if test_string in response.text:
                self.vulnerabilities_found.append({
                    'type': 'Cross-Site Scripting (XSS)',
                    'url': test_url,
                    'severity': 'High',
                    'description': 'Potential XSS vulnerability detected'
                })
        except:
            pass

    def check_directory_listing(self):
        """Check if directory listing is enabled"""
        test_dirs = ["/images/", "/assets/", "/files/", "/uploads/"]
        
        for directory in test_dirs:
            try:
                response = self.session.get(f"{self.target_url}{directory}", timeout=10)
                if "Index of" in response.text or "Directory listing for" in response.text:
                    self.vulnerabilities_found.append({
                        'type': 'Directory Listing',
                        'url': f"{self.target_url}{directory}",
                        'severity': 'Medium',
                        'description': 'Directory listing is enabled'
                    })
                    break
            except:
                continue

    def check_server_info(self):
        """Check for server information disclosure"""
        try:
            response = self.session.get(self.target_url, timeout=10)
            headers = response.headers
            
            if 'server' in headers:
                self.vulnerabilities_found.append({
                    'type': 'Server Information Disclosure',
                    'details': headers['server'],
                    'severity': 'Low',
                    'description': 'Server version information disclosed'
                })
                
            if 'x-powered-by' in headers:
                self.vulnerabilities_found.append({
                    'type': 'Technology Information Disclosure',
                    'details': headers['x-powered-by'],
                    'severity': 'Low',
                    'description': 'Technology information disclosed'
                })
        except:
            pass

    def check_ssl_tls(self):
        """Check for SSL/TLS misconfigurations"""
        try:
            hostname = urllib.parse.urlparse(self.target_url).hostname
            context = socket.create_connection((hostname, 443), timeout=10)
            
            self.vulnerabilities_found.append({
                'type': 'SSL/TLS Check',
                'severity': 'Info',
                'description': 'SSL/TLS connection successful (basic check)'
            })
        except:
            self.vulnerabilities_found.append({
                'type': 'SSL/TLS Check',
                'severity': 'Medium',
                'description': 'Could not establish SSL/TLS connection'
            })

    def check_forms(self):
        """Check forms for potential vulnerabilities"""
        try:
            response = self.session.get(self.target_url, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = soup.find_all('form')
            
            for form in forms:
                form_details = {
                    'action': form.get('action', ''),
                    'method': form.get('method', 'get').lower(),
                    'inputs': []
                }
                
                for input_tag in form.find_all('input'):
                    form_details['inputs'].append({
                        'name': input_tag.get('name', ''),
                        'type': input_tag.get('type', ''),
                        'value': input_tag.get('value', '')
                    })
                
                if form_details['method'] == 'get':
                    self.vulnerabilities_found.append({
                        'type': 'Form Security',
                        'severity': 'Low',
                        'description': 'Form using GET method - sensitive data may be exposed in URLs',
                        'form_details': form_details
                    })
        except:
            pass

    def scan(self):
        """Run all vulnerability checks"""
        print("[*] Starting vulnerability scan...\n")
        
        checks = [
            ('SQL Injection', self.check_sql_injection),
            ('XSS', self.check_xss),
            ('Directory Listing', self.check_directory_listing),
            ('Server Information', self.check_server_info),
            ('SSL/TLS', self.check_ssl_tls),
            ('Forms', self.check_forms)
        ]
        
        for name, check in checks:
            print(f"[*] Checking for {name}...")
            check()
        
        print("\n[*] Scan completed!")

    def display_results(self):
        """Display scan results"""
        if not self.vulnerabilities_found:
            print("\n[+] No vulnerabilities found!")
            return
        
        print("\n[+] Vulnerabilities Found:")
        print("="*80)
        
        for i, vuln in enumerate(self.vulnerabilities_found, 1):
            print(f"\n{i}. {vuln['type']} ({vuln['severity']})")
            print("-"*50)
            print(f"Description: {vuln['description']}")
            
            if 'url' in vuln:
                print(f"URL: {vuln['url']}")
            if 'details' in vuln:
                print(f"Details: {vuln['details']}")
            if 'form_details' in vuln:
                print("Form Details:")
                print(f"  Action: {vuln['form_details']['action']}")
                print(f"  Method: {vuln['form_details']['method']}")
                print("  Inputs:")
                for inp in vuln['form_details']['inputs']:
                    print(f"    - Name: {inp['name']}, Type: {inp['type']}, Value: {inp['value']}")

def main():
    print("\nWebsite Vulnerability Scanner")
    print("="*50)
    
    target_url = input("Enter target URL (e.g., https://example.com): ").strip()
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'http://' + target_url
    
    scanner = VulnerabilityScanner(target_url)
    scanner.display_banner()
    scanner.scan()
    scanner.display_results()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[!] Scan interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"\n[!] An error occurred: {str(e)}")
        sys.exit(1)